# StudySphere - Cloud Computing Project Review II

## Team Information

**Team Number:** XX  
**Team Members:**
- [Member 1] - [Roll Number] - DevOps & Infrastructure
- [Member 2] - [Roll Number] - Backend Microservices
- [Member 3] - [Roll Number] - Frontend & UI/UX
- [Member 4] - [Roll Number] - GenAI Integration

**Project Title:** StudySphere - AI-Powered Study Group Platform  
**Submission Date:** [Date]

---

## Table of Contents

1. Executive Summary
2. System Architecture
3. DevOps Implementation
   - 3.1 Infrastructure as Code (Terraform)
   - 3.2 CI/CD Pipeline (GitHub Actions)
   - 3.3 Environment Promotion Strategy
4. Containerization & Orchestration
   - 4.1 Docker Implementation
   - 4.2 Kubernetes Deployments
   - 4.3 Horizontal Pod Autoscaling
5. GenAI Integration
   - 5.1 Use Case 1: Quiz Classification
   - 5.2 Use Case 2: Content Moderation
   - 5.3 Use Case 3: Resource Summarization
6. Technical Implementation
7. Testing & Validation
8. Challenges & Solutions
9. Conclusion & Future Work
10. Appendices
    - A. Architecture Diagrams
    - B. Code Snippets
    - C. Azure Portal Screenshots
    - D. Pipeline Execution Logs

---

## 1. Executive Summary

StudySphere is a cloud-native, AI-powered platform designed to help college students create and manage study groups. Built using modern microservices architecture, the application leverages Azure cloud services, Kubernetes orchestration, and cutting-edge GenAI capabilities to provide an intelligent, scalable, and secure collaboration environment.

**Key Highlights:**
- ✅ 4 microservices (Auth, User, Group, Chat) deployed on Azure Kubernetes Service
- ✅ Fully automated CI/CD pipeline with GitHub Actions
- ✅ Infrastructure as Code using Terraform
- ✅ 3 GenAI use cases with Azure OpenAI and Content Moderator
- ✅ Discord-like responsive UI with React and Tailwind CSS
- ✅ Real-time chat with Socket.io
- ✅ Horizontal Pod Autoscaling for high availability

**Technology Stack:**
- Frontend: React 18, Vite, shadcn/ui, Tailwind CSS
- Backend: Node.js 18, Express.js, Socket.io, Prisma ORM
- Database: Azure PostgreSQL Flexible Server
- Infrastructure: Azure (AKS, ACR, PostgreSQL)
- AI: Azure OpenAI (gpt-4o-mini), Azure Content Moderator
- DevOps: Terraform, GitHub Actions, Docker, Kubernetes

---

## 2. System Architecture

[Include architecture diagram from docs/architecture.md]

StudySphere follows a microservices architecture pattern with the following components:

1. **Frontend Layer:** React SPA with responsive Discord-like UI
2. **API Gateway:** NGINX Ingress Controller for routing
3. **Microservices:** Four independent services handling specific domains
4. **Data Layer:** PostgreSQL for persistence, Redis for caching
5. **AI Layer:** Azure OpenAI and Content Moderator for intelligent features

---

## 3. DevOps Implementation

### 3.1 Infrastructure as Code (Terraform)

[Include Terraform configuration screenshot]

All Azure resources are provisioned using Terraform:

**Resources Created:**
- Resource Group: studysphere-rg
- PostgreSQL Flexible Server (SKU: B_Standard_B1ms)
- Azure Container Registry (Standard)
- Azure Kubernetes Service (2-10 node pool)
- Log Analytics Workspace

**Key Benefits:**
- Version-controlled infrastructure
- Reproducible environments
- Automated provisioning
- Cost optimization

### 3.2 CI/CD Pipeline (GitHub Actions)

[Include pipeline diagram from ci-cd/pipeline.md]

Our automated pipeline ensures code quality and rapid deployment:

**Pipeline Stages:**
1. Build & Test (3-5 min)
2. Docker Build (5-8 min)
3. Deploy to Dev (2-3 min)
4. Deploy to Test (manual approval)
5. Deploy to Prod (manual approval)

**Deployment Metrics:**
- Lead time: ~20 minutes (commit to production)
- Deployment frequency: 2+ per week
- Change failure rate: <15%
- MTTR: <1 hour

### 3.3 Environment Promotion Strategy

[Include environment promotion diagram]

Three-tier strategy: Development → Testing → Production

---

## 4. Containerization & Orchestration

### 4.1 Docker Implementation

Each service is containerized with optimized Dockerfiles:

**Image Optimization:**
- Multi-stage builds for frontend
- Alpine base images (reduced size)
- Layer caching for faster builds
- Security scanning with Trivy

### 4.2 Kubernetes Deployments

[Include K8s deployment screenshot]

All services deployed on AKS with:
- Namespace isolation (dev/test/prod)
- Health probes (liveness, readiness)
- Resource limits enforcement
- Secret management

### 4.3 Horizontal Pod Autoscaling

HPA configured for all services:
- Target CPU: 50%
- Min replicas: 2
- Max replicas: 10 (15 for chat service)

---

## 5. GenAI Integration

### 5.1 Use Case 1: Quiz Classification

[Include sequence diagram]

**Problem:** How to personalize study group recommendations?

**Solution:** Azure OpenAI classifies quiz answers into interests

**Implementation:**
- Service: Azure OpenAI (gpt-4o-mini)
- Cost: $0.00005 per request
- Latency: 1-2 seconds
- Accuracy: Contextual understanding

### 5.2 Use Case 2: Content Moderation

[Include moderation flow diagram]

**Problem:** Prevent harmful content in chat

**Solution:** Azure Content Moderator screens messages in real-time

**Implementation:**
- Service: Azure Content Moderator
- Cost: $0.001 per transaction (free tier available)
- Latency: <100ms
- Detection: Profanity, PII, offensive content

### 5.3 Use Case 3: Resource Summarization

[Include summarization example]

**Problem:** Students lack time to read long documents

**Solution:** Azure OpenAI generates bullet-point summaries

**Implementation:**
- Service: Azure OpenAI (gpt-4o-mini)
- Cost: $0.00025 per summary
- Latency: 2-5 seconds
- Quality: High-quality, technical terminology

---

## 6. Technical Implementation

[Include code snippets for key components]

---

## 7. Testing & Validation

**Test Coverage:**
- Unit tests: 75%
- Integration tests: Postman collections
- Smoke tests: Automated in CI/CD
- Load tests: k6 (1000 concurrent users)

---

## 8. Challenges & Solutions

**Challenge 1:** Socket.io scaling across multiple pods
**Solution:** Implemented Redis adapter for pub/sub

**Challenge 2:** Azure PostgreSQL connectivity
**Solution:** Configured firewall rules and SSL

**Challenge 3:** Kubernetes secret management
**Solution:** Used native K8s secrets + Azure Key Vault

---

## 9. Conclusion & Future Work

StudySphere successfully demonstrates modern cloud-native development with microservices, Kubernetes, and GenAI integration. The platform is production-ready, scalable, and provides real value to students.

**Future Enhancements:**
- Video calling with Azure Communication Services
- Mobile apps (React Native)
- Multi-region deployment
- Advanced analytics

---

## 10. Appendices

### Appendix A: Architecture Diagrams
[Include all Mermaid diagrams]

### Appendix B: Code Snippets
[Include key implementation code]

### Appendix C: Azure Portal Screenshots
![Azure OpenAI](screenshots/azure-openai.png)
![Content Moderator](screenshots/content-moderator.png)
![AKS Cluster](screenshots/aks-cluster.png)
![Container Registry](screenshots/acr.png)

### Appendix D: Pipeline Execution Logs
[Include GitHub Actions logs]

---

**Note:** This is a PDF stub. Convert this markdown to PDF using:
- Pandoc: `pandoc TeamXX_ReviewII.md -o TeamXX_ReviewII.pdf`
- Or use online markdown-to-PDF converters
- Include all diagrams and screenshots in the final PDF
- Page count: 15-20 pages recommended

---

**END OF DOCUMENT**

