name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}

jobs:
  deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to ACR
      run: az acr login --name ${{ secrets.ACR_NAME }}

    - name: Build and push auth-service
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/auth-service:${{ github.sha }} \
                     -t ${{ env.ACR_LOGIN_SERVER }}/auth-service:latest \
                     -f services/auth-service/Dockerfile .
        docker push ${{ env.ACR_LOGIN_SERVER }}/auth-service:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/auth-service:latest

    - name: Build and push user-service
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/user-service:${{ github.sha }} \
                     -t ${{ env.ACR_LOGIN_SERVER }}/user-service:latest \
                     -f services/user-service/Dockerfile .
        docker push ${{ env.ACR_LOGIN_SERVER }}/user-service:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/user-service:latest

    - name: Build and push group-service
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/group-service:${{ github.sha }} \
                     -t ${{ env.ACR_LOGIN_SERVER }}/group-service:latest \
                     -f services/group-service/Dockerfile .
        docker push ${{ env.ACR_LOGIN_SERVER }}/group-service:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/group-service:latest

    - name: Build and push chat-service
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/chat-service:${{ github.sha }} \
                     -t ${{ env.ACR_LOGIN_SERVER }}/chat-service:latest \
                     -f services/chat-service/Dockerfile .
        docker push ${{ env.ACR_LOGIN_SERVER }}/chat-service:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/chat-service:latest

    - name: Build and push frontend
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} \
                     -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest \
                     -f frontend/Dockerfile ./frontend
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}

    - name: Update deployments to use new images
      run: |
        kubectl set image deployment/auth-service auth-service=${{ env.ACR_LOGIN_SERVER }}/auth-service:${{ github.sha }} -n production
        kubectl set image deployment/user-service user-service=${{ env.ACR_LOGIN_SERVER }}/user-service:${{ github.sha }} -n production
        kubectl set image deployment/group-service group-service=${{ env.ACR_LOGIN_SERVER }}/group-service:${{ github.sha }} -n production
        kubectl set image deployment/chat-service chat-service=${{ env.ACR_LOGIN_SERVER }}/chat-service:${{ github.sha }} -n production
        kubectl set image deployment/frontend frontend=${{ env.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }} -n production

    - name: Deployment complete
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üåê Application: http://20.249.205.162"
        echo "üì¶ Images tagged with: ${{ github.sha }}"
